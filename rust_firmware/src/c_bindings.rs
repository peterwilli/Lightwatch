/* automatically generated by rust-bindgen 0.58.1 */

pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bma4_accel {
    #[doc = " Accel X data"]
    pub x: i16,
    #[doc = " Accel Y data"]
    pub y: i16,
    #[doc = " Accel Z data"]
    pub z: i16,
}
pub type Accel = bma4_accel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtc_date {
    pub year: u16,
    pub month: u8,
    pub day: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
}
#[test]
fn bindgen_test_layout_rtc_date() {
    assert_eq!(
        ::core::mem::size_of::<rtc_date>(),
        8usize,
        concat!("Size of: ", stringify!(rtc_date))
    );
    assert_eq!(
        ::core::mem::align_of::<rtc_date>(),
        2usize,
        concat!("Alignment of ", stringify!(rtc_date))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<rtc_date>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtc_date),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<rtc_date>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtc_date),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<rtc_date>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rtc_date),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<rtc_date>())).hour as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtc_date),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<rtc_date>())).minute as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rtc_date),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<rtc_date>())).second as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rtc_date),
            "::",
            stringify!(second)
        )
    );
}
pub type RTCDate = rtc_date;
extern "C" {
    pub fn enableAccelerometer();
}
extern "C" {
    pub fn readAccelerometer(accel: *mut Accel) -> u8;
}
extern "C" {
    pub fn serialPrintln(text: *const cstr_core::c_char);
}
extern "C" {
    pub fn setBrightness(brightness: u8);
}
extern "C" {
    pub fn getScreenSize(w: *mut u16, h: *mut u16);
}
extern "C" {
    pub fn readIRQ() -> u8;
}
extern "C" {
    pub fn getStepCount() -> u32;
}
extern "C" {
    pub fn enableStepCounter();
}
extern "C" {
    pub fn color565(r: u8, g: u8, b: u8) -> u16;
}
extern "C" {
    pub fn getPinAXP202() -> u8;
}
extern "C" {
    pub fn vibrate(duration: u8);
}
extern "C" {
    pub fn enableVibrator();
}
extern "C" {
    pub fn enableRTC();
}
extern "C" {
    pub fn rtc_setDateTime(year: u16, month: u8, day: u8, hour: u8, minute: u8, second: u8);
}
extern "C" {
    pub fn rtc_getDateTime(rtcDate: *mut RTCDate);
}
extern "C" {
    pub fn isCharging() -> u8;
}
extern "C" {
    pub fn getBattChargeCurrent(current: *mut f32);
}
extern "C" {
    pub fn getBattDischargeCurrent(current: *mut f32);
}
extern "C" {
    pub fn displaySleep();
}
extern "C" {
    pub fn displayWakeup();
}
extern "C" {
    pub fn powerOffEverythingExceptESP32();
}
extern "C" {
    pub fn getRTCDataAtIndex(index: u16) -> u8;
}
extern "C" {
    pub fn setRTCDataAtIndex(index: u16, data: u8);
}
extern "C" {
    pub fn deepSleep(sleepMillis: u32);
}
extern "C" {
    pub fn lightSleepUntilTapOrRaiseArm();
    pub fn deepSleepUntilSidePress();
    pub fn lightSleepUntilSidePress();
}
extern "C" {
    pub fn setTextSize(size: u8);
}
extern "C" {
    pub fn fillRect(x: i32, y: i32, w: i32, h: i32, color: u32);
}
extern "C" {
    pub fn fillScreen(color: u16);
}
extern "C" {
    pub fn setTextColor(c: u16);
}
extern "C" {
    pub fn drawString(string: *const cstr_core::c_char, x: i32, y: i32, font: u8) -> i16;
}
extern "C" {
    pub fn setTextDatum(datum: u8);
}
extern "C" {
    pub fn drawLine(xs: i32, ys: i32, xe: i32, ye: i32, color: u32);
}
extern "C" {
    pub fn pushImage(x0: i32, y0: i32, w: i32, h: i32, data: *mut u16);
}
extern "C" {
    pub fn tft_setAddrWindow(x0: i32, y0: i32, w: i32, h: i32);
}
extern "C" {
    pub fn tft_startWrite();
}
extern "C" {
    pub fn tft_endWrite();
}
extern "C" {
    pub fn tft_pushColor(color: u16);
}
extern "C" {
    pub fn getTouch(x: *mut i16, y: *mut i16) -> u8;
}
